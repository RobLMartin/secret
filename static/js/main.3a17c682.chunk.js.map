{"version":3,"sources":["components/Video.js","components/Dialog/Message.js","components/Dialog/Button.js","components/Dialog/Answers.js","components/Dialog/index.js","components/FinalMessage.js","App.js","serviceWorker.js","index.js"],"names":["Video","play","IFrame","src","frameBorder","allow","allowFullScreen","title","styled","iframe","Message","delay","message","useState","setShow","useEffect","setTimeout","Container","listen","Text","key","div","p","theme","contrast","Button","button","paper","Reset","base","Answer","answers","onClick","noop","map","a","option","variant","response","Dialog","setPlay","index","setIndex","temp","setTemp","dialog","0","1","2","Grid","Answers","handleClick","font","FinalMessage","pattern","fontContrast","modified","App","className","Background","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a17c682.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Video = ({ play = false }) => {\r\n  return (\r\n    <>\r\n      {play && (\r\n        <IFrame\r\n          src=\"https://www.youtube.com/embed/oHg5SJYRHA0?autoplay=1&mute=1\"\r\n          frameBorder=\"0\"\r\n          allow=\"autoplay; encrypted-media\"\r\n          allowFullScreen\r\n          title=\"video\"\r\n        ></IFrame>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n\r\nconst IFrame = styled.iframe`\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Message = ({ delay = \"2s\", message }) => {\r\n  const [show, setShow] = useState(false);\r\n  useEffect(() => {\r\n    setTimeout(() => setShow(true));\r\n\r\n    return () => setShow(false);\r\n  }, [message]);\r\n\r\n  return (\r\n    <Container listen={message} delay={delay}>\r\n      <Text key={message}>{message}</Text>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n\r\nconst Container = styled.div`\r\n  opacity: ${p => (p.listen ? 1 : 0)};\r\n  transition: opacity ${p => p.delay + \" ease-in\"};\r\n  margin-right: auto;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid ${p => p.theme.contrast}; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1.5s steps(10, end), blink-caret 0.75s step-end infinite;\r\n  /* The typing effect */\r\n  @keyframes typing {\r\n    from {\r\n      width: 0;\r\n    }\r\n    to {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  /* The typewriter cursor effect */\r\n  @keyframes blink-caret {\r\n    from,\r\n    to {\r\n      border-color: transparent;\r\n    }\r\n    50% {\r\n      border-color: ${p => p.theme.contrast};\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  background-color: ${p => p.theme.paper};\r\n  border: none;\r\n  color: white;\r\n  padding: 15px 32px;\r\n  text-align: left;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  padding-left: 0.5em;\r\n  &:hover {\r\n    background-color: ${p => p.theme.contrast};\r\n  }\r\n`;\r\n\r\nconst Reset = styled.button`\r\n  background-color: ${p => p.theme.base};\r\n  color: ${p => p.theme.contrast};\r\n  border: none;\r\n  padding: 15px 32px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  &:hover {\r\n    background-color: ${p => p.theme.paper};\r\n  }\r\n`;\r\n\r\nexport { Button, Reset };\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\n\r\nconst Answer = ({ answers, onClick = noop => noop }) => {\r\n  return (\r\n    <Container>\r\n      {answers.map(a => (\r\n        <Button\r\n          key={a.option}\r\n          variant=\"other\"\r\n          onClick={() => onClick(a.response)}\r\n        >\r\n          {a.option}\r\n        </Button>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 0.1em;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"./Message\";\r\nimport { Reset } from \"./Button\";\r\nimport Answers from \"./Answers\";\r\nconst Dialog = ({ setPlay = noop => noop }) => {\r\n  const [index, setIndex] = useState(0);\r\n  const [temp, setTemp] = useState(null);\r\n  const dialog = {\r\n    0: {\r\n      message: \"Hello...\",\r\n      answers: [\r\n        { option: \"Is this Wilt Chamberland?\", response: \"1\" },\r\n        {\r\n          option: \"Is this the Krusty Krab?\",\r\n          response: \"No, this is Robfella.\"\r\n        },\r\n        {\r\n          option: \"Zoot Suit Riot(riot!)\",\r\n          response: \"Throw back a bottle of beer..\"\r\n        }\r\n      ]\r\n    },\r\n    1: {\r\n      message: \"Do you have any bones that need collecting?\",\r\n      answers: [\r\n        {\r\n          option: \"Bones? Weird thing to say...\",\r\n          response: \"hmm.. Who are you?\"\r\n        },\r\n        {\r\n          option: \"No but I have some Florida swamp land with your name on it!\",\r\n          response: \"2\"\r\n        },\r\n        {\r\n          option: \"What are you some kinda paleontologist?\",\r\n          response:\r\n            \"Ross was the worst character in friends, you can't change my mind..\"\r\n        }\r\n      ]\r\n    },\r\n    2: {\r\n      message: \"Oh, Bert Farlander, you old so-and-so..\",\r\n      answers: [\r\n        { option: \"You thought I forgot... Never gonna.....\", response: \"fin\" }\r\n      ]\r\n    }\r\n  };\r\n\r\n  const handleClick = response => {\r\n    if (response === \"fin\") setPlay(true);\r\n    if (dialog[response]) {\r\n      setIndex(response);\r\n    } else {\r\n      setTemp(response);\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <Grid>\r\n        <Message message={temp || dialog[index].message} />\r\n        {!temp && (\r\n          <Answers\r\n            answers={dialog[index].answers}\r\n            onClick={response => handleClick(response)}\r\n          />\r\n        )}\r\n        <Reset\r\n          onClick={() => {\r\n            setIndex(0);\r\n            setTemp(null);\r\n          }}\r\n        >\r\n          Reset\r\n        </Reset>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n\r\nconst Container = styled.div`\r\n  z-index: 3;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  color: ${p => p.theme.font};\r\n  font-size: 3rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 1em;\r\n`;\r\n","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FinalMessage = () => {\r\n  return (\r\n    <Container>\r\n      <Text>Happy Birthday, Bobby Ray Cornn Jr!</Text>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FinalMessage;\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  top: 50vh;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 4;\r\n`;\r\nconst Text = styled.p`\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid ${p => p.theme.contrast}; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1.5s steps(10, end), blink-caret 0.75s step-end infinite;\r\n  font-size: 4rem;\r\n  color: white;\r\n  /* The typing effect */\r\n  @keyframes typing {\r\n    from {\r\n      width: 0;\r\n    }\r\n    to {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  /* The typewriter cursor effect */\r\n  @keyframes blink-caret {\r\n    from,\r\n    to {\r\n      border-color: transparent;\r\n    }\r\n    50% {\r\n      border-color: ${p => p.theme.contrast};\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport \"./App.css\";\nimport Video from \"./components/Video\";\nimport Dialog from \"./components/Dialog\";\nimport FinalMessage from \"./components/FinalMessage\";\n\nconst theme = {\n  base: \"#2b2e43\",\n  paper: \"#2f3247\",\n  contrast: \"#956ee5\",\n  pattern: null,\n  font: \"white\",\n  fontContrast: \"#4c4f61\",\n  modified: null\n};\n\nfunction App() {\n  const [play, setPlay] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Background />\n        <Video play={play} />\n        {play && <FinalMessage />}\n        {!play && <Dialog setPlay={setPlay} />}\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Background = styled.div`\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background-color: ${p => p.theme.base};\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}